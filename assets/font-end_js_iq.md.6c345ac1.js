import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.ac5a18bd.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/js/iq.md","filePath":"font-end/js/iq.md","lastUpdated":1699869147000}'),p={name:"font-end/js/iq.md"},o=l(`<h2 id="_1-js数据类型" tabindex="-1">1.JS数据类型 <a class="header-anchor" href="#_1-js数据类型" aria-label="Permalink to &quot;1.JS数据类型&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">基本数据类型：Number String Boolean Null Undefined BigInt Symbol</span></span>
<span class="line"><span style="color:#e1e4e8;">引用数据类型：Object(包括Array Date 正则 Function Object Map Set WeakMap WeakSet)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">基本数据类型：Number String Boolean Null Undefined BigInt Symbol</span></span>
<span class="line"><span style="color:#24292e;">引用数据类型：Object(包括Array Date 正则 Function Object Map Set WeakMap WeakSet)</span></span></code></pre></div><h2 id="_2-包装类型" tabindex="-1">2.包装类型 <a class="header-anchor" href="#_2-包装类型" aria-label="Permalink to &quot;2.包装类型&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">为了能在基本数据类型上执行操作，JS提供了相应的包装类型:</span></span>
<span class="line"><span style="color:#e1e4e8;">Number String Boolean</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">为了能在基本数据类型上执行操作，JS提供了相应的包装类型:</span></span>
<span class="line"><span style="color:#24292e;">Number String Boolean</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>“装箱”<br> 在读取基本数据类型的方法和属性时，JS会自动将基本数据类型转化为包装类型，这种自动转换被称为装箱</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//例子</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 基本数据类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> strObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 自动装箱并调用String对象的toUpperCase方法</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//自动装箱读取String对象的constructor属性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//例子</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 基本数据类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> strObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 自动装箱并调用String对象的toUpperCase方法</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//自动装箱读取String对象的constructor属性</span></span></code></pre></div></div><h2 id="_3-如何判断js数据类型" tabindex="-1">3.如何判断JS数据类型 <a class="header-anchor" href="#_3-如何判断js数据类型" aria-label="Permalink to &quot;3.如何判断JS数据类型&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1.typeof 基本数据类型</span></span>
<span class="line"><span style="color:#e1e4e8;">2.instanceof 引用数据类型，通过原型链</span></span>
<span class="line"><span style="color:#e1e4e8;">3.Object.prototype.toString.call()</span></span>
<span class="line"><span style="color:#e1e4e8;">4.constructor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1.typeof 基本数据类型</span></span>
<span class="line"><span style="color:#24292e;">2.instanceof 引用数据类型，通过原型链</span></span>
<span class="line"><span style="color:#24292e;">3.Object.prototype.toString.call()</span></span>
<span class="line"><span style="color:#24292e;">4.constructor</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Object.prototype.toString.call()可以检测数据类型，为什么对象obj.toString就不行<br> 因为Object的toString是Object原型上的方法，而Array\\Function这些Object的实例对象，他们的toString都重写了相应的toString，所以不同</p></div><h2 id="_4-如何判断两个对象相等" tabindex="-1">4.如何判断两个对象相等 <a class="header-anchor" href="#_4-如何判断两个对象相等" aria-label="Permalink to &quot;4.如何判断两个对象相等&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> 使用JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(obj) 来判断，但是如何两个对象中key顺序不同就会出错</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//2.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepEqual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aKeys</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bKeys</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(b)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aKeys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> bKeys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> aKeys) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">b.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">deepEqual</span><span style="color:#E1E4E8;">(a[key], b[key])) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> 使用JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(obj) 来判断，但是如何两个对象中key顺序不同就会出错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//2.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepEqual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">aKeys</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bKeys</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(b)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (aKeys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> bKeys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> aKeys) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">deepEqual</span><span style="color:#24292E;">(a[key], b[key])) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="_5-如何判空对象" tabindex="-1">5.如何判空对象 <a class="header-anchor" href="#_5-如何判空对象" aria-label="Permalink to &quot;5.如何判空对象&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Reflect.</span><span style="color:#B392F0;">ownKeys</span><span style="color:#E1E4E8;">(obj).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Reflect.</span><span style="color:#6F42C1;">ownKeys</span><span style="color:#24292E;">(obj).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><h2 id="_6-为什么0-1-0-2-0-3" tabindex="-1">6.为什么0.1 + 0.2 !== 0.3 <a class="header-anchor" href="#_6-为什么0-1-0-2-0-3" aria-label="Permalink to &quot;6.为什么0.1 + 0.2 !== 0.3&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">因为在相加计算时，发生了两次精度丢失。</span></span>
<span class="line"><span style="color:#e1e4e8;">JS中Number类型是双精度浮点型，由于0.1转化为二进制是一个无限循环二进制数。但是内存保存的二进制浮点数的小数位数只有52位，所以发生了第一次精度丢失</span></span>
<span class="line"><span style="color:#e1e4e8;">当0.1 + 0.2做加操作时要对阶，0.1的阶数比0.2小，所以0.1的尾数位要右移，发生第二次精度丢失</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">因为在相加计算时，发生了两次精度丢失。</span></span>
<span class="line"><span style="color:#24292e;">JS中Number类型是双精度浮点型，由于0.1转化为二进制是一个无限循环二进制数。但是内存保存的二进制浮点数的小数位数只有52位，所以发生了第一次精度丢失</span></span>
<span class="line"><span style="color:#24292e;">当0.1 + 0.2做加操作时要对阶，0.1的阶数比0.2小，所以0.1的尾数位要右移，发生第二次精度丢失</span></span></code></pre></div><h2 id="_7-类型转换" tabindex="-1">7.类型转换 <a class="header-anchor" href="#_7-类型转换" aria-label="Permalink to &quot;7.类型转换&quot;">​</a></h2><h3 id="_7-1显式类型转换-he-隐式类型转换" tabindex="-1">7.1显式类型转换 he 隐式类型转换 <a class="header-anchor" href="#_7-1显式类型转换-he-隐式类型转换" aria-label="Permalink to &quot;7.1显式类型转换 he 隐式类型转换&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">通过包装类型进行转换</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//123</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;学习&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">引用类型转化为数字类型</span></span>
<span class="line"><span style="color:#E1E4E8;">1.调用对象自带的valueOf,若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#E1E4E8;">2.调用对象的toString方法，若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#E1E4E8;">3.报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">引用类型转化为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">1.调用对象的toString方法，若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#E1E4E8;">2.调用对象自带的valueOf,若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#E1E4E8;">3.报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">({}) </span><span style="color:#6A737D;">//&#39;[object object]&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">通过包装类型进行转换</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//123</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;学习&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">引用类型转化为数字类型</span></span>
<span class="line"><span style="color:#24292E;">1.调用对象自带的valueOf,若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#24292E;">2.调用对象的toString方法，若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#24292E;">3.报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">//NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">引用类型转化为字符串</span></span>
<span class="line"><span style="color:#24292E;">1.调用对象的toString方法，若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#24292E;">2.调用对象自带的valueOf,若返回的是一个基本类型，就转换为数字类型返回</span></span>
<span class="line"><span style="color:#24292E;">3.报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">({}) </span><span style="color:#6A737D;">//&#39;[object object]&#39;</span></span></code></pre></div><h2 id="_8-和-的区别" tabindex="-1">8.===和==的区别 <a class="header-anchor" href="#_8-和-的区别" aria-label="Permalink to &quot;8.===和==的区别&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">===严格相等运算符（比较变量的值和类型是否相等）</span></span>
<span class="line"><span style="color:#e1e4e8;">==宽松相等运算符（先将变量进行类型转换，再比较值是否相等）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">===严格相等运算符（比较变量的值和类型是否相等）</span></span>
<span class="line"><span style="color:#24292e;">==宽松相等运算符（先将变量进行类型转换，再比较值是否相等）</span></span></code></pre></div><h2 id="_9-null和undefined的区别" tabindex="-1">9.null和undefined的区别 <a class="header-anchor" href="#_9-null和undefined的区别" aria-label="Permalink to &quot;9.null和undefined的区别&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">null 表示没有对象，此处不该有值，代表一个空对象指针</span></span>
<span class="line"><span style="color:#e1e4e8;">undefined 表示缺少值，此处应该有值，但未定义</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">null 表示没有对象，此处不该有值，代表一个空对象指针</span></span>
<span class="line"><span style="color:#24292e;">undefined 表示缺少值，此处应该有值，但未定义</span></span></code></pre></div><h2 id="_10-什么情况下会返回undefined" tabindex="-1">10.什么情况下会返回undefined <a class="header-anchor" href="#_10-什么情况下会返回undefined" aria-label="Permalink to &quot;10.什么情况下会返回undefined&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1.当访问一个声明但未赋值或者赋值为undefined的变量</span></span>
<span class="line"><span style="color:#e1e4e8;">2.当访问一个对象中不存在的属性</span></span>
<span class="line"><span style="color:#e1e4e8;">3.当访问一个没有return或者rentur没有内容的函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1.当访问一个声明但未赋值或者赋值为undefined的变量</span></span>
<span class="line"><span style="color:#24292e;">2.当访问一个对象中不存在的属性</span></span>
<span class="line"><span style="color:#24292e;">3.当访问一个没有return或者rentur没有内容的函数</span></span></code></pre></div><h2 id="_11-如何区分对象和数组" tabindex="-1">11.如何区分对象和数组 <a class="header-anchor" href="#_11-如何区分对象和数组" aria-label="Permalink to &quot;11.如何区分对象和数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//instanceof</span></span>
<span class="line"><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#6A737D;">//constructor</span></span>
<span class="line"><span style="color:#E1E4E8;">([]).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//Array</span></span>
<span class="line"><span style="color:#6A737D;">//Object.prototype.toString.call</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">//[object Array]</span></span>
<span class="line"><span style="color:#6A737D;">//Array.isArray</span></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//instanceof</span></span>
<span class="line"><span style="color:#24292E;">[] </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#6A737D;">//constructor</span></span>
<span class="line"><span style="color:#24292E;">([]).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//Array</span></span>
<span class="line"><span style="color:#6A737D;">//Object.prototype.toString.call</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">//[object Array]</span></span>
<span class="line"><span style="color:#6A737D;">//Array.isArray</span></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">//true</span></span></code></pre></div><h2 id="_12-多维数组如何降维" tabindex="-1">12.多维数组如何降维 <a class="header-anchor" href="#_12-多维数组如何降维" aria-label="Permalink to &quot;12.多维数组如何降维&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">1.数组字符串化</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [[</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">],</span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#E1E4E8;">arr </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">2.递归</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> resArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        arr.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            item </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toArr</span><span style="color:#E1E4E8;">(item) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> resArr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">toArr</span><span style="color:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resArr </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">3.flat函数</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [[</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">],</span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">flat</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.数组字符串化</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [[</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">33</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">55</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">arr </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">2.递归</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> resArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            item </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toArr</span><span style="color:#24292E;">(item) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> resArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toArr</span><span style="color:#24292E;">(arr)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resArr </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">3.flat函数</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [[</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">33</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">55</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">()</span></span></code></pre></div><h2 id="_13-什么是类数组-如何将其转化为真正的数组" tabindex="-1">13.什么是类数组， 如何将其转化为真正的数组 <a class="header-anchor" href="#_13-什么是类数组-如何将其转化为真正的数组" aria-label="Permalink to &quot;13.什么是类数组， 如何将其转化为真正的数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">类数组就是类似数组的对象，具有类似数组的索引属性和length属性，可以使用一些数组的方法， 比如for循环，forEach等，</span></span>
<span class="line"><span style="color:#E1E4E8;">JS中常见的类数组有：arguments对象，document.getElements获取的内容， 字符串等</span></span>
<span class="line"><span style="color:#E1E4E8;">如何转化为真正的数组：</span></span>
<span class="line"><span style="color:#E1E4E8;">    1.Array.from</span></span>
<span class="line"><span style="color:#E1E4E8;">    2.Array.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.slice.call</span></span>
<span class="line"><span style="color:#E1E4E8;">    3.可迭代对象可以使用扩展运算符</span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">类数组就是类似数组的对象，具有类似数组的索引属性和length属性，可以使用一些数组的方法， 比如for循环，forEach等，</span></span>
<span class="line"><span style="color:#24292E;">JS中常见的类数组有：arguments对象，document.getElements获取的内容， 字符串等</span></span>
<span class="line"><span style="color:#24292E;">如何转化为真正的数组：</span></span>
<span class="line"><span style="color:#24292E;">    1.Array.from</span></span>
<span class="line"><span style="color:#24292E;">    2.Array.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.slice.call</span></span>
<span class="line"><span style="color:#24292E;">    3.可迭代对象可以使用扩展运算符</span><span style="color:#D73A49;">...</span></span></code></pre></div><h2 id="_14-如何遍历对象的属性" tabindex="-1">14.如何遍历对象的属性 <a class="header-anchor" href="#_14-如何遍历对象的属性" aria-label="Permalink to &quot;14.如何遍历对象的属性&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">1.for in循环 （遍历对象可枚举属性，包括自身定义的属性和从原型链继承而来的属性）</span></span>
<span class="line"><span style="color:#E1E4E8;">2.Object.keys（返回一个包含自身属性名的数组）</span></span>
<span class="line"><span style="color:#E1E4E8;">3.Object.entries （返回一个包含键值对的数组）</span></span>
<span class="line"><span style="color:#E1E4E8;">4.Object.getOwnPropertyNames</span></span>
<span class="line"><span style="color:#E1E4E8;">5.Object.getOwnPropertySymbols</span></span>
<span class="line"><span style="color:#E1E4E8;">6.Reflect.ownKeys</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.for in循环 （遍历对象可枚举属性，包括自身定义的属性和从原型链继承而来的属性）</span></span>
<span class="line"><span style="color:#24292E;">2.Object.keys（返回一个包含自身属性名的数组）</span></span>
<span class="line"><span style="color:#24292E;">3.Object.entries （返回一个包含键值对的数组）</span></span>
<span class="line"><span style="color:#24292E;">4.Object.getOwnPropertyNames</span></span>
<span class="line"><span style="color:#24292E;">5.Object.getOwnPropertySymbols</span></span>
<span class="line"><span style="color:#24292E;">6.Reflect.ownKeys</span></span></code></pre></div>`,31),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
