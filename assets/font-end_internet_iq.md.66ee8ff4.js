import{_ as s,o as a,c as t,Q as e}from"./chunks/framework.ac004ed7.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/internet/iq.md","filePath":"font-end/internet/iq.md","lastUpdated":1700126629000}'),n={name:"font-end/internet/iq.md"},p=e(`<h2 id="tcp-ip-四层模型和-osi-七层模型" tabindex="-1">TCP/IP 四层模型和 OSI 七层模型 <a class="header-anchor" href="#tcp-ip-四层模型和-osi-七层模型" aria-label="Permalink to &quot;TCP/IP 四层模型和 OSI 七层模型&quot;">​</a></h2><table><thead><tr><th>TCP/IP</th><th>OSI</th></tr></thead><tbody><tr><td>应用层</td><td>应用层 表示层 会话层</td></tr><tr><td>传输层</td><td>传输层</td></tr><tr><td>网络层</td><td>网络层</td></tr><tr><td>网络接口层</td><td>数据链路层物理层</td></tr></tbody></table><h2 id="tcp-和-udp" tabindex="-1">TCP 和 UDP <a class="header-anchor" href="#tcp-和-udp" aria-label="Permalink to &quot;TCP 和 UDP&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">TCP是面向连接、可靠、基于字节流的传输层协议，是专门为了在不可靠的网络中提供一个可靠的端对端字节流而设计的</span></span>
<span class="line"><span style="color:#e1e4e8;">UDP是OSI模型中一种无连接的传输层协议，提供简单不可靠的非链接传输层服务，面向报文</span></span>
<span class="line"><span style="color:#e1e4e8;">区别：</span></span>
<span class="line"><span style="color:#e1e4e8;">    1.TCP面向连接，可靠性高；UDP基于非链接，可靠性低</span></span>
<span class="line"><span style="color:#e1e4e8;">    2.TCP是连接的通信，需要三次握手等连接过程，会有延时；UDP没有建立连接的过程，实时性高</span></span>
<span class="line"><span style="color:#e1e4e8;">    3.传输相同大小数据时，TCP开销大，UDP开销小</span></span>
<span class="line"><span style="color:#e1e4e8;">    4.TCP只能一对一，UDP可以一对多、多对一、多对多</span></span>
<span class="line"><span style="color:#e1e4e8;">使用场景：</span></span>
<span class="line"><span style="color:#e1e4e8;">    1.追求实时性，高速传输的场景使用UDP</span></span>
<span class="line"><span style="color:#e1e4e8;">    2.需要传输大量数据并对可靠性要求高的场景使用TCP</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">TCP是面向连接、可靠、基于字节流的传输层协议，是专门为了在不可靠的网络中提供一个可靠的端对端字节流而设计的</span></span>
<span class="line"><span style="color:#24292e;">UDP是OSI模型中一种无连接的传输层协议，提供简单不可靠的非链接传输层服务，面向报文</span></span>
<span class="line"><span style="color:#24292e;">区别：</span></span>
<span class="line"><span style="color:#24292e;">    1.TCP面向连接，可靠性高；UDP基于非链接，可靠性低</span></span>
<span class="line"><span style="color:#24292e;">    2.TCP是连接的通信，需要三次握手等连接过程，会有延时；UDP没有建立连接的过程，实时性高</span></span>
<span class="line"><span style="color:#24292e;">    3.传输相同大小数据时，TCP开销大，UDP开销小</span></span>
<span class="line"><span style="color:#24292e;">    4.TCP只能一对一，UDP可以一对多、多对一、多对多</span></span>
<span class="line"><span style="color:#24292e;">使用场景：</span></span>
<span class="line"><span style="color:#24292e;">    1.追求实时性，高速传输的场景使用UDP</span></span>
<span class="line"><span style="color:#24292e;">    2.需要传输大量数据并对可靠性要求高的场景使用TCP</span></span></code></pre></div><h2 id="ftp-和-dns" tabindex="-1">FTP 和 DNS <a class="header-anchor" href="#ftp-和-dns" aria-label="Permalink to &quot;FTP 和 DNS&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">FTP（文件传输协议）基于TCP协议的应用层协议</span></span>
<span class="line"><span style="color:#e1e4e8;">DNS就基于UDP协议的应用层协议</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">FTP（文件传输协议）基于TCP协议的应用层协议</span></span>
<span class="line"><span style="color:#24292e;">DNS就基于UDP协议的应用层协议</span></span></code></pre></div><h2 id="http-和-https" tabindex="-1">HTTP 和 HTTPS <a class="header-anchor" href="#http-和-https" aria-label="Permalink to &quot;HTTP 和 HTTPS&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HTTP: 超文本传输协议，是基于TCP/IP协议来传递数据</span></span>
<span class="line"><span style="color:#e1e4e8;">HTTPS： 超文本传输安全协议，基于HTTP进行通信，同时利用SSL/TLS加密数据，保护交换数据的隐私和完整性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HTTP: 超文本传输协议，是基于TCP/IP协议来传递数据</span></span>
<span class="line"><span style="color:#24292e;">HTTPS： 超文本传输安全协议，基于HTTP进行通信，同时利用SSL/TLS加密数据，保护交换数据的隐私和完整性</span></span></code></pre></div><h3 id="https-是如何传输的-传输流程" tabindex="-1">HTTPS 是如何传输的（传输流程） <a class="header-anchor" href="#https-是如何传输的-传输流程" aria-label="Permalink to &quot;HTTPS 是如何传输的（传输流程）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1.TCP三次握手</span></span>
<span class="line"><span style="color:#e1e4e8;">2.客户端验证服务器数字证书</span></span>
<span class="line"><span style="color:#e1e4e8;">3.DH算法协商对称加密算法的密钥和hash算法的密钥</span></span>
<span class="line"><span style="color:#e1e4e8;">4.SSL安全加密隧道协商完成</span></span>
<span class="line"><span style="color:#e1e4e8;">5.网页以加密的方式创数，用协商的对称加密算法和密钥进行加密，保证数据机密性；用协商的hash算法进行数据完整性保护。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1.TCP三次握手</span></span>
<span class="line"><span style="color:#24292e;">2.客户端验证服务器数字证书</span></span>
<span class="line"><span style="color:#24292e;">3.DH算法协商对称加密算法的密钥和hash算法的密钥</span></span>
<span class="line"><span style="color:#24292e;">4.SSL安全加密隧道协商完成</span></span>
<span class="line"><span style="color:#24292e;">5.网页以加密的方式创数，用协商的对称加密算法和密钥进行加密，保证数据机密性；用协商的hash算法进行数据完整性保护。</span></span></code></pre></div><h3 id="http-和-https-的区别" tabindex="-1">HTTP 和 HTTPS 的区别 <a class="header-anchor" href="#http-和-https-的区别" aria-label="Permalink to &quot;HTTP 和 HTTPS 的区别&quot;">​</a></h3><table><thead><tr><th>区别</th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>端口</td><td>80</td><td>443</td></tr><tr><td>传输</td><td>明文传输</td><td>数据传输过程加密</td></tr><tr><td>安全性</td><td>较差</td><td>较好</td></tr><tr><td>证书</td><td>无</td><td>需要向 CA 申请数字证书</td></tr><tr><td>响应速度</td><td>较快 只有三次握手 客户端和服务器之间交换 3 个包</td><td>较慢 除了三次握手，还有 SSL/TLS 握手 交换 12 个包</td></tr><tr><td>耗费资源</td><td>较低</td><td>较高</td></tr></tbody></table><h3 id="http-报文" tabindex="-1">HTTP 报文 <a class="header-anchor" href="#http-报文" aria-label="Permalink to &quot;HTTP 报文&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HTTP报文分为请求报文和响应报文</span></span>
<span class="line"><span style="color:#e1e4e8;">请求报文： 请求行 请求头 请求内容</span></span>
<span class="line"><span style="color:#e1e4e8;">响应报文： 响应行 响应头 响应内容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HTTP报文分为请求报文和响应报文</span></span>
<span class="line"><span style="color:#24292e;">请求报文： 请求行 请求头 请求内容</span></span>
<span class="line"><span style="color:#24292e;">响应报文： 响应行 响应头 响应内容</span></span></code></pre></div><h3 id="http-状态码" tabindex="-1">HTTP 状态码 <a class="header-anchor" href="#http-状态码" aria-label="Permalink to &quot;HTTP 状态码&quot;">​</a></h3><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>100</td><td>继续， 一般在发送 post 请求时，已发送了请求头后服务器返回此信息，表示确认</td></tr><tr><td>200</td><td>成功， 表示客户端发送的请求被服务器正常处理</td></tr><tr><td>204</td><td>no content， 表示客户端发送的请求被服务器正常处理，但响应报文不含内容实体</td></tr><tr><td>206</td><td>partial content， 表示进行范围请求成功</td></tr><tr><td>301</td><td>永久重定向，表示资源已被分配了新的 URL</td></tr><tr><td>302</td><td>临时重定向，表示资源已被临时分配了新的 URL</td></tr><tr><td>303</td><td>表示资源存在另一个 URL，应该使用 GET 方法获取资源</td></tr><tr><td>304</td><td>资源未被修改，使用缓存</td></tr><tr><td>307</td><td>临时重定向，和 302 类似，但是期望客户端保持请求方式不变向新地址发送请求</td></tr><tr><td>400</td><td>请求报文存在语法错误</td></tr><tr><td>401</td><td>表示未授权，发送的请求需要通过认证</td></tr><tr><td>403</td><td>表示请求被服务器拒绝，可在实体部分返回原因描述，常见的有跨域</td></tr><tr><td>404</td><td>表示服务器未找到请求的资源</td></tr><tr><td>500</td><td>表示服务器在执行请求时发生了错误</td></tr><tr><td>501</td><td>表示服务器不支持当前请求</td></tr><tr><td>503</td><td>表示服务器停机或超负载</td></tr><tr><td>504</td><td>网关超时</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于 301-303，浏览器会自动重新发送一个 get 请求</p></div><h3 id="http-版本" tabindex="-1">HTTP 版本 <a class="header-anchor" href="#http-版本" aria-label="Permalink to &quot;HTTP 版本&quot;">​</a></h3><table><thead><tr><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>http0.9</td><td>只有一个 get 命令，服务器只能响应 html 格式的字符串，每次请求都要三次握手四次挥手</td></tr><tr><td>http1.0</td><td>新增了 post、head 请求，支持服务器响应图像、视频、二进制等文件</td></tr><tr><td>http1.1</td><td>引入持久连接、管道机制、content-length、分块传输编码、put、patch、options、delete、trace、connect 请求，缺点：响应数据时按顺序返回的，所以会出现&quot;对头阻塞&quot;</td></tr><tr><td>http2</td><td>二进制协议、多工通信、数据流、头信息压缩、服务器推送，缺点：多个 http 请求一旦发生丢包，就会触发 TCP 重传机制</td></tr><tr><td>http3</td><td>为了解决http2的缺点，把http下层的TCP协议改成了UDP协议</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>管道机制：一个 TCP 连接可以发送多个请求，服务器按管道顺序返回<br> 数据流: 每个数据包都有唯一标识，所以不需要按顺序响应<br></p></div><h3 id="http-常见请求" tabindex="-1">HTTP 常见请求 <a class="header-anchor" href="#http-常见请求" aria-label="Permalink to &quot;HTTP 常见请求&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">get（获取资源） post（提交数据） put（修改数据） delete（删除数据） head（获取资源的元信息）</span></span>
<span class="line"><span style="color:#e1e4e8;">options（列出可对资源实行的请求方法，预见请求，用来跨域请求） connect（建立连接隧道，用于代理服务器）</span></span>
<span class="line"><span style="color:#e1e4e8;">trace（追踪资源-响应的传输数据） patch （更新局部资源）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">get（获取资源） post（提交数据） put（修改数据） delete（删除数据） head（获取资源的元信息）</span></span>
<span class="line"><span style="color:#24292e;">options（列出可对资源实行的请求方法，预见请求，用来跨域请求） connect（建立连接隧道，用于代理服务器）</span></span>
<span class="line"><span style="color:#24292e;">trace（追踪资源-响应的传输数据） patch （更新局部资源）</span></span></code></pre></div><h3 id="为什么有时候请求会发送两次" tabindex="-1">为什么有时候请求会发送两次？ <a class="header-anchor" href="#为什么有时候请求会发送两次" aria-label="Permalink to &quot;为什么有时候请求会发送两次？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">当发送比如post put delete等复杂请求跨域的时候，浏览器会发送两次请求</span></span>
<span class="line"><span style="color:#e1e4e8;">两次请求分别是：options预检请求，真正的请求</span></span>
<span class="line"><span style="color:#e1e4e8;">原因：</span></span>
<span class="line"><span style="color:#e1e4e8;">    因为浏览器限制跨域一般有两种方式，一种是直接限制跨域请求地发出，另一种是请求到达了服务器，但是响应被浏览器拦截了。</span></span>
<span class="line"><span style="color:#e1e4e8;">    一般浏览器都是第二种方式，这种方式可能会导致跨域请求虽然返回时被拦截，但是还是到达了服务器并对数据库的数据产生影响。</span></span>
<span class="line"><span style="color:#e1e4e8;">    所以为了防止这种情况，浏览器会先发送一个options预检请求来得知服务器是否允许跨域请求，若允许，则第二次发送真实请求。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">当发送比如post put delete等复杂请求跨域的时候，浏览器会发送两次请求</span></span>
<span class="line"><span style="color:#24292e;">两次请求分别是：options预检请求，真正的请求</span></span>
<span class="line"><span style="color:#24292e;">原因：</span></span>
<span class="line"><span style="color:#24292e;">    因为浏览器限制跨域一般有两种方式，一种是直接限制跨域请求地发出，另一种是请求到达了服务器，但是响应被浏览器拦截了。</span></span>
<span class="line"><span style="color:#24292e;">    一般浏览器都是第二种方式，这种方式可能会导致跨域请求虽然返回时被拦截，但是还是到达了服务器并对数据库的数据产生影响。</span></span>
<span class="line"><span style="color:#24292e;">    所以为了防止这种情况，浏览器会先发送一个options预检请求来得知服务器是否允许跨域请求，若允许，则第二次发送真实请求。</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在使用CORS跨域资源共享时，就是使用的options预检请求。<br> 预检请求不是每一次都会产生，因为浏览器会对预检请求缓存，通过服务器设置Access-control-max-age设置缓存时间。</p></div><h2 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;DNS&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">DNS是域名解析系统，基于UDP协议， 端口53</span></span>
<span class="line"><span style="color:#e1e4e8;">用于将域名解析为IP地址</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">DNS解析全过程：</span></span>
<span class="line"><span style="color:#e1e4e8;">1.向浏览器&gt;系统&gt;路由器&gt;ISP DNS缓存，若有缓存，则返回</span></span>
<span class="line"><span style="color:#e1e4e8;">2.若没有，就进行迭代查询</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">DNS是域名解析系统，基于UDP协议， 端口53</span></span>
<span class="line"><span style="color:#24292e;">用于将域名解析为IP地址</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">DNS解析全过程：</span></span>
<span class="line"><span style="color:#24292e;">1.向浏览器&gt;系统&gt;路由器&gt;ISP DNS缓存，若有缓存，则返回</span></span>
<span class="line"><span style="color:#24292e;">2.若没有，就进行迭代查询</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>迭代查询：<br> 1.本地域名服务器将该请求转发到互联网的根域名服务器<br> 2.根域名服务器将域名的顶级域的服务器IP返回本地DNS<br> 3.本地DNS根据返回的IP向顶级域发送请求<br> 4.顶级域将域名的二级域的服务器IP返回本地DNS<br> 5.本地DNS根据返回的IP向二级域发送请求<br> 6.循环这些过程，直到本地DNS服务器得到最终的查询结果<br></p></div><h2 id="从输入url到页面展示经历了什么" tabindex="-1">从输入URL到页面展示经历了什么 <a class="header-anchor" href="#从输入url到页面展示经历了什么" aria-label="Permalink to &quot;从输入URL到页面展示经历了什么&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1.输入URL</span></span>
<span class="line"><span style="color:#e1e4e8;">2.通过DNS获取IP</span></span>
<span class="line"><span style="color:#e1e4e8;">3.浏览器通过IP与服务器建立TCP连接</span></span>
<span class="line"><span style="color:#e1e4e8;">4.服务器将资源返回至浏览器</span></span>
<span class="line"><span style="color:#e1e4e8;">5.浏览器接收资源并下载</span></span>
<span class="line"><span style="color:#e1e4e8;">6.浏览器解析资源后，渲染页面并执行脚本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1.输入URL</span></span>
<span class="line"><span style="color:#24292e;">2.通过DNS获取IP</span></span>
<span class="line"><span style="color:#24292e;">3.浏览器通过IP与服务器建立TCP连接</span></span>
<span class="line"><span style="color:#24292e;">4.服务器将资源返回至浏览器</span></span>
<span class="line"><span style="color:#24292e;">5.浏览器接收资源并下载</span></span>
<span class="line"><span style="color:#24292e;">6.浏览器解析资源后，渲染页面并执行脚本</span></span></code></pre></div><h2 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">CDN: 分布式网络架构，旨在加速互联网内容的传递，提供更快的访问速度和更高的性能。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">CDN: 分布式网络架构，旨在加速互联网内容的传递，提供更快的访问速度和更高的性能。</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为什么CDN速度快？<br> 因为CDN在全球各地放置边缘服务器，CDN能够实时根据网络流量和各边缘服务器的连接负载等将用户的请求重定向到最合适的边缘服务器上，加速访问。</p></div>`,33),l=[p];function o(c,d,r,i,h,P){return a(),t("div",null,l)}const u=s(n,[["render",o]]);export{b as __pageData,u as default};
